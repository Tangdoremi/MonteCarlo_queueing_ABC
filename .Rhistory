#### caculate waiting time for each student and simulate ####
set.seed(1)
nSim = 1000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
N
E_N = mean(N)
E_N
nSim = 1000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N = mean(N)
E_N
summary(N)
help(variance)
help(var)
ggplot(data=as.data.frame(N))+
geom_histogram(aes(x=N, y=..density..),fill='deepskyblue4')
set.seed(1)
nSim = 2000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N = mean(N)
ggplot(data=as.data.frame(N))+
geom_histogram(aes(x=N, y=..density..),fill='deepskyblue4')
set.seed(1)
nSim = 5000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N = mean(N)
ggplot(data=as.data.frame(N))+
geom_histogram(aes(x=N, y=..density..),fill='deepskyblue4')
nSim = 10000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N = mean(N)
ggplot(data=as.data.frame(N))+
geom_histogram(aes(x=N, y=..density..),fill='deepskyblue4')
nSim = 100
for(j in (1: nSim)){
E_N = numeric(nSim)
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
ggplot
N
E_N
N
mean(N)
var(N)
E_N
nSim = 100
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
nSim = 500
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
rm(list = ls())
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 500
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 200
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 100
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
var(E_N)
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 100
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
var(E_N)
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 150
E_N = numeric(nSim)
for(j in (1: nSim)){
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
E_N[j] = mean(N)
}
ggplot(data=as.data.frame(E_N))+
geom_histogram(aes(x=E_N, y=..density..),fill='deepskyblue4')
var(E_N)
rm(list = ls())
library(ggplot2)
#t_interval: les étudiants arrivent à la cantine selon un processus de Poisson de paramètre 1, i.e. l'intervalle du temps où deux étudiants arrivent suit une loi exponentielle de paramètre 1
#t_arrival: les temps où les étudiants arrivent
#t_servi: suit une loi exponentielle de moyenne 0.75, i.e. la loi exponentielle de paramètre 4/3
#### caculate waiting time for each student and simulate ####
#set.seed(1)
nSim = 10000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
ggplot(data=as.data.frame(N))+
geom_histogram(aes(x=N, y=..density..),fill='deepskyblue4')
help(qnorm)
qnorm(0.9)
pnorm(1.28)
e = qnorm(0.975)*sqrt(var(N))/100
e
mean(N)
e = qnorm(0.95)*sqrt(var(N))/100
e
nSim = 10000
N = numeric(nSim)
for(i in (1: nSim)){
n = 200
t = 1
sum_t_interval = 0
sum_t_servi = 0
t_wait = numeric(n)
t_wait[1] = 0
while(t < n){
t_interval = rexp(1)
t_servi = rexp(1, rate = 4/3)
sum_t_interval = sum_t_interval + t_interval
sum_t_servi = sum_t_servi + t_servi
if(sum_t_interval < sum_t_servi){
t_wait[t+1] = sum_t_servi - sum_t_interval
}
else{
sum_t_servi = sum_t_interval
t_wait[t+1] = 0
}
t = t + 1
}
N[i] = sum(t_wait > 5)
}
mean(N)
e = qnorm(0.95)*sqrt(var(N))/100
e
